@page "/nl-to-sql"
@rendermode InteractiveServer
@inject NLQueryEngine NLQueryEngine
@inject DatabaseEngine dbEngine
@inject ProductService ProductService
@using System.Data
@using NL2SQL_Blazor.Components.Models

<style>
    .result-table-container {
    height: 500px;
    width: 1000px;
    overflow: auto;
    border: 1px solid #1976d2;
    background: #f5f7fa;
    padding: 8px;
    --border-radius: 6px;
    }
    .result-table {
    width: 100%;
    border-collapse: collapse;
    min-width: 980px;
    }
    .result-table th, .result-table td {
    border: 1px solid #1976d2;
    padding: 6px 10px;
    text-align: left;
    }
    .result-table th {
    background-color: #1976d2;
    color: #fff;
    }
    .result-table tr:nth-child(even) {
    background-color: #e3eafc;
    }
    .result-table tr:nth-child(odd) {
    background-color: #fff;
    }
</style>


<h3>NLQuery Engine</h3>

<table cellspacing="1" cellpadding="2">
    <tr>
        <td>
            <table>
                <tr>
                    <td colspan="2">
                        <label>Choose your product:</label>
                        <input list="products" @bind="product" style="width: 150px;" />
                        <datalist id="products">
                            @foreach (var product in products)
                            {
                                <option value="@product.ProductName">@product.ProductName</option>
                            }
                        </datalist>
                        <label>DBServer: {}</label>
                        
                    </td>                   
                </tr>
                <tr>
                    <td>
                        <textarea @bind="userInput" placeholder="Enter your question..." style="width: 600px; height :75px;"></textarea>
                    </td>
                    <td>
                        <button class="mt-2 btn btn-primary" @onclick="Convert" disabled="@isLoading">
                            <span>Convert</span>
                        </button>
                        @if (isLoading)
                        {
                            <div class="mt-2 text-primary">
                                <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                                Processing...
                            </div>
                        }
                    </td>
                </tr>
            </table>            
        </td>
        <td rowspan="2">
            <table>
                <tr>
                    <td style="width: 400px;">
                        <h4>Frequently searched prompts</h4>
                        <div style="height: 400px; overflow-y: auto; font-size: 13px; line-height: 1.2;">
                            @foreach (var prompt in prompts)
                            {
                                <p style="margin: 4px 0;">@prompt</p>
                            }
                        </div>
                    </td>
                </tr>
            </table>
        </td>
    </tr>
    @if (!string.IsNullOrEmpty(queryOutput) && !isLoading)
    {
        <tr>
            <td>
            <table>
                <tr><td><p>SQL Output:</p></td></tr>
                <tr>
                    <td>
                        <textarea style="width: 600px; height : 100px;" @bind="queryOutput"></textarea>
                    </td>
                    <td>
                        <button class="mt-2 btn btn-primary" @onclick="ExecuteSql" disabled="@isExecuting">
                            @if (isExecuting)
                            {
                                <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                                <span class="visually-hidden">Executing...</span>
                            }
                            else
                            {
                                <span>Execute SQL</span>
                            }
                        </button>
                    </td>
                </tr>
                @if (!string.IsNullOrEmpty(alternativeCmd))
                {
                    <tr>
                        <td colspan="2"><p>Alternative Commands:</p><label>@alternativeCmd</label></td>
                    </tr>
                }
            </table>
            </td>
        </tr>
    }
</table>


 
@if(!string.IsNullOrEmpty(queryOutput) && !isLoading)
{
    @if (dtResult != null)
    {
        <div class="result-table-container">
            <table class="result-table">
                <thead>
                    <tr>
                        @foreach (DataColumn col in dtResult.Columns)
                        {
                            <th>@col.ColumnName</th>
                        }
                    </tr>
                </thead>
                <tbody>
                    @foreach (DataRow row in dtResult.Rows)
                    {
                        <tr>
                            @foreach (var item in row.ItemArray)
                            {
                                <td>@item</td>
                            }
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
}

@code {

    private string userInput;
    private string result;
    private string queryOutput;
    private string[] commands;
    private string alternativeCmd;
    private bool isLoading = false;
    private bool isExecuting = false;
    private DataTable dtResult;

    private string product { get; set; }
    private string dbserver { get; set; }
    private List<Product> products = new();

    protected override async Task OnInitializedAsync()
    {
        products = new List<Product> { await ProductService.GetProductByIdAsync(1) };
    }
    private async Task Convert()
    {
        isLoading = true;
        queryOutput = string.Empty;
        dtResult = new DataTable();
        try
        { 
            result = await NLQueryEngine.ConvertToQueryAsync(userInput, products.FirstOrDefault());
            commands = result.Split(new[] { ';' }, StringSplitOptions.RemoveEmptyEntries);
            if(commands.Length == 0)
            {
                queryOutput = "No query generated.";
                return;
            }
            queryOutput = commands[0].Trim(); // Take only the first SQL statement
            if(commands.Length > 1)
                alternativeCmd = string.Join("; ", commands.Skip(1)).Trim(); // Join remaining commands as alternatives
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task ExecuteSql()
    {
        isExecuting = true;
        try
        {
            dtResult = await dbEngine.ExecuteQueryAsync(queryOutput);
        }
        finally
        {
            isExecuting = false;
        }
    }

    private List<string> prompts = new List<string>()
    {
        "Fetch top 10 claims", 
        "Fetch top 5 EAPG details", 
        "Fetch top 10 837 claims",
        "Fetch top 5 claims with status 'APPROVED'",
        "Fetch top 5 claims with status 'DENY'",
        "Fetch top 5 claims with status 'PAID'",
        "Fetch top 5 claims with status 'PEND'",
        "Fetch top 5 claims with status 'REJECT'",
        "Fetch top 5 claims with status 'REVIEW'",
        "Fetch top 5 claims with status 'REVIEW' and 'PEND'"
    };
}
