@page "/nl-to-sql"
@rendermode InteractiveServer
@inject NLQueryEngine NLQueryEngine
@inject DatabaseEngine dbEngine
@inject ProductService ProductService
@inject UserService UserService
@inject AuthenticationService AuthService
@inject IJSRuntime JS
@inject QueryHistoryService QueryHistoryService
@using System.Data
@using NL2SQL_Blazor.Components.Models

<style>
    .result-table-container {
    height: 350px;
    width: 950px;
    overflow: auto;
    border: 1px solid #1976d2;
    background: #f5f7fa;
    padding: 8px;
    --border-radius: 6px;
    }
    .result-table {
    width: 100%;
    border-collapse: collapse;
    min-width: 900px;
    }
    .result-table th, .result-table td {
    border: 1px solid #1976d2;
    padding: 6px 10px;
    text-align: left;
    }
    .result-table th {
    background-color: #1976d2;
    color: #fff;
    }
    .result-table tr:nth-child(even) {
    background-color: #e3eafc;
    }
    .result-table tr:nth-child(odd) {
    background-color: #fff;
    }

    .tableclass{
    width: 100%;
    border-collapse: collapse;
    font-family: Arial, sans-serif;
    font-size: 14px;
    margin: 2px;
    }
    .tablebody
    {
    vertical-align: top;           
    width:100%;
    font-family:Arial;
    font-size:15px;

    }
    .tdwidth{
    width:65%
    }
    .tdleft
    {
    width:70%;
    vertical-align:top;       
    }
    .tdright {
    width: 30%;
    vertical-align: top;
    }
    .textareainput{
    width:800px ;
    height :75px;
    }
    .textarearesult
    {
    width:800px; 
    height : 100px;
    scroll-behavior:auto;
    }
    .inputddl{
    width:200px;
    margin:2px;
    }
    .lblhead
    {
    font-family:Arial;
    font-size: 30px;
    font-weight: bold;

    }
    .td1{
    width:18%;
    text-align: left;
    }

    .td2 {
    width: 45%;
    text-align: left;
    }

    .td3 {
    width: 17%;
    text-align: left;
    }
    .tdtext{
    width: 60%; 
    padding-right: 5px;
    }
    .heading
    {
    font-family: Arial;
    font-size: 20px;
    font-weight: bold;
    color: #1976d2;
    }
    .subhead{
    font-family: Arial;
    font-size: 15px;
    font-weight: bold;
    color: #1976d2;
    }

    .processing-text {
        font-size: 10px;
        vertical-align: middle;
    }


</style>
<script src="downloadFile.js"></script>
<table cellspacing="1" cellpadding="2" class="tablebody">
    <tr>
        <td colspan="2" class="heading">NLQuery Engine</td>
    </tr>
    <tr>
        <td class="tdleft">
            <table cellpadding="1" cellspacing="2">
                <tr>
                    <td colspan="2">
                        <table cellpadding="1" cellspacing="1">
                            <tr>
                                <td align="left">Choose your product:</td>
                                <td align="left">
                                    <input class="inputddl" list="products" @bind="product" />
                                    <datalist id="products">
                                        @if (products != null)
                                        {
                                            @foreach (var product in products)
                                            {
                                                <option value="@product.ProductName"></option>
                                            }
                                        }
                                    </datalist>

                                </td>
                                <td align="left">
                                    <label>Database Server: @dbserver</label>
                                </td>
                            </tr>
                        </table>
                    </td>
                </tr>

                <tr>
                    <td class="tdtext"> <textarea class="textareainput" @bind="userInput" placeholder="Enter your question..."></textarea></td>
                    <td valign="top" align="right" style="width: 150px">
                        <button class="mt-2 btn btn-primary" @onclick="Convert" disabled="@isLoading">Convert</button>
                        @if (isLoading)
                        {
                            <div class="mt-2 text-primary">
                                <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                                <span class="processing-text">Processing...</span>
                            </div>
                        }
                    </td>
                </tr>
                @if (!string.IsNullOrEmpty(queryOutput) && !isLoading)
                {
                    <tr>
                        <td colspan="2" valign="top">
                            <table class="tablebody">
                                <tr><td colspan="2">@dbserver Output:</td></tr>
                                <tr>
                                    <td>
                                        <textarea class="textarearesult" @bind="queryOutput"></textarea>
                                    </td>
                                    <td align="right" valign="top" style="width: 150px">
                                        <button class="mt-2 btn btn-primary" @onclick="ExecuteSql" disabled="@isExecuting">
                                            @if (isExecuting)
                                            {
                                                <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                                                <span class="visually-hidden">Executing...</span>
                                            }
                                            else
                                            {
                                                <span>Execute</span>
                                            }
                                        </button>
                                    </td>
                                </tr>
                                @if (!string.IsNullOrEmpty(alternativeCmd))
                                {
                                    <tr>
                                        <td colspan="2"><p>Alternative Commands:</p><label>@alternativeCmd</label></td>
                                    </tr>
                                }
                            </table>
                        </td>
                    </tr>
                }   

                <tr>
                    <td colspan="2" class="tdleft">

                        @if (!string.IsNullOrEmpty(queryOutput) && !isLoading)
                        {
                            @if (dtResult != null)
                            {
                                
                                @if (!string.IsNullOrEmpty(queryOutput) && !isLoading && dtResult != null && dtResult.Columns.Count > 0)
                                {
                                    <div style="text-align: right; margin-bottom: 5px;">
                                        <a href="/nl-to-sql" @onclick:preventDefault="true" style="font-size: 15px; color: darkgreen; text-decoration: underline; cursor: pointer;" @onclick="ExportGridToText">Export Result</a>
                                    </div>
                                }

                                <div class="result-table-container">
                                    <table class="result-table">
                                        <thead>
                                            <tr>
                                                @foreach (DataColumn col in dtResult.Columns)
                                                {
                                                    <th>@col.ColumnName</th>
                                                }
                                            </tr>
                                        </thead>
                                        <tbody>
                                            @foreach (DataRow row in dtResult.Rows)
                                            {
                                                <tr>
                                                    @foreach (var item in row.ItemArray)
                                                    {
                                                        <td>@item</td>
                                                    }
                                                </tr>
                                            }
                                        </tbody>
                                    </table>

                                </div>
                            }
                        }


                    </td>
                </tr>
            </table>
        </td>
        <td class="tdright">
            <table>
                <tr>
                    <td>
                        <div>
                            <ul class="nav nav-tabs" id="promptTabs" role="tablist">
                                <li class="nav-item" role="presentation">
                                    <button class="nav-link subhead @(activeTab == 0 ? "active" : "")" id="frequent-tab" type="button" role="tab" @onclick="() => SetTab(0)">System Prompts</button>
                                </li>
                                <li class="nav-item" role="presentation">
                                    <button class="nav-link subhead @(activeTab == 1 ? "active" : "")" id="custom-tab" type="button" role="tab" @onclick="() => SetTab(1)">History</button>
                                </li>
                            </ul>
                            <div class="tab-content" id="promptTabsContent" style="border:1px solid #ccc; border-top:0; padding:10px; background:#fff;">
                                @if (activeTab == 0)
                                {
                                    <div class="tab-pane fade show active" id="frequent" role="tabpanel">
                                        <div style="height: 400px; overflow-y: auto; font-size: 13px; line-height: 2;">
                                            @foreach (var prompt in prompts)
                                            {
                                                <a href="/nl-to-sql" @onclick="() => SetPrompt(prompt)" style="cursor:pointer;">@prompt</a>

                                                <br />
                                            }
                                        </div>
                                    </div>
                                }
                                @if (activeTab == 1)
                                {
                                    <div class="tab-pane fade show active" id="custom" role="tabpanel">
                                        <div style="height: 400px; overflow-y: auto; font-size: 13px; line-height: 1.2;">
                                            @if (recentQueries.Count == 0)
                                            {
                                                <p>No history yet.</p>
                                            }
                                            else
                                            {
                                                <ul>
                                                    @foreach (var query in recentQueries)
                                                    {
                                                        <li>@query</li>
                                                    }
                                                </ul>
                                            }
                                        </div>
                                    </div>
                                }
                            </div>
                        </div>
                    </td>
                </tr>
            </table>
        </td>
    </tr>
</table>
@code {

    /// <summary>
    /// Stores the user's natural language input.
    /// </summary>
    private string userInput;

    /// <summary>
    /// Stores the result returned from the NLQueryEngine.
    /// </summary>
    private string result;

    /// <summary>
    /// Stores the generated SQL query output.
    /// </summary>
    private string queryOutput;

    /// <summary>
    /// Stores the array of SQL commands generated from the NLQueryEngine.
    /// </summary>
    private string[] commands;

    /// <summary>
    /// Stores alternative SQL commands, if any.
    /// </summary>
    private string alternativeCmd;

    /// <summary>
    /// Indicates if the query conversion is in progress.
    /// </summary>
    private bool isLoading = false;

    /// <summary>
    /// Indicates if the SQL execution is in progress.
    /// </summary>
    private bool isExecuting = false;

    /// <summary>
    /// Stores the result of the executed SQL query as a DataTable.
    /// </summary>
    private DataTable dtResult;

    /// <summary>
    /// The index of the currently active tab (System Prompts or History).
    /// </summary>
    private int activeTab = 0;

    /// <summary>
    /// The name of the selected database server.
    /// </summary>
    private string dbserver { get; set; }

    /// <summary>
    /// The list of products available to the user.
    /// </summary>
    private IEnumerable<Product> products;

    /// <summary>
    /// The currently selected product.
    /// </summary>
    Product selectedProduct;

    private string _product;

    /// <summary>
    /// The name of the selected product. Setting this also updates the selectedProduct and dbserver.
    /// </summary>
    private string product
    {
        get => _product;
        set
        {
            if (_product != value)
            {
                _product = value;
                selectedProduct = products.FirstOrDefault(p => p.ProductName == _product);
                dbserver = selectedProduct?.DBServerName ?? string.Empty;
            }
        }
    }

    /// <summary>
    /// Initializes the component by loading the user's products and setting the default selection.
    /// </summary>
    protected override async Task OnInitializedAsync()
    {
        products = await UserService.GetProductsByUserIdAsync(AuthService.CurrentUserId);
        if (products.Any())
        {
            product = products.First().ProductName;
            dbserver = products.First().DBServerName;
        }
    }

    /// <summary>
    /// Converts the user's natural language input to a SQL query using the NLQueryEngine.
    /// </summary>
    private async Task Convert()
    {
        isLoading = true;
        queryOutput = string.Empty;
        dtResult = new DataTable();
        try
        { 
            result = await NLQueryEngine.ConvertToQueryAsync(userInput, selectedProduct);
            commands = result.Split(new[] { ';' }, StringSplitOptions.RemoveEmptyEntries);
            if(commands.Length == 0)
            {
                queryOutput = "No query generated.";
                return;
            }
            queryOutput = commands[0].Trim(); // Take only the first SQL statement
            await QueryHistoryService.AddAsync(userInput, AuthService.CurrentUsername);
            if(commands.Length > 1)
                alternativeCmd = string.Join("; ", commands.Skip(1)).Trim(); // Join remaining commands as alternatives
        }
        finally
        {
            isLoading = false;
        }
    }

    /// <summary>
    /// Executes the generated SQL query against the selected product's database.
    /// </summary>
    private async Task ExecuteSql()
    {
        if (HasSqlInjectionPattern(queryOutput))
        {
            queryOutput = "Potential SQL injection detected. Execution blocked.";
            dtResult = null;
            return;
        }

        isExecuting = true;
        try
        {
            dtResult = await dbEngine.ExecuteQueryAsync(queryOutput, selectedProduct.ProductName);
        }
        finally
        {
            isExecuting = false;
        }
    }

    /// <summary>
    /// Checks the provided SQL for common SQL injection patterns.
    /// </summary>
    /// <param name="sql">The SQL query to check.</param>
    /// <returns>True if a potential SQL injection pattern is detected; otherwise, false.</returns>
    private bool HasSqlInjectionPattern(string sql)
    {
        if (string.IsNullOrWhiteSpace(sql))
            return false;

        var lowered = sql.ToLowerInvariant();

        // 1. Dangerous keywords and functions
        string[] keywords = {
        "alter", "create ", "delete", "drop", "exec", "execute", "insert", "merge", "update", "union", "truncate", "grant", "revoke", "declare",
        "cast(", "set", "sysobjects", "syscolumns", "information_schema", "xp_"
        };

        foreach (var keyword in keywords)
        {
            if (lowered.Contains(keyword))
                return true;
        }

        // 2. Statement separators and comments
        if (lowered.Contains(";") || lowered.Contains("--") || lowered.Contains("/*") || lowered.Contains("*/"))
            return true;

        // 3. Tautologies and always-true conditions
        if (System.Text.RegularExpressions.Regex.IsMatch(lowered, @"(\b|\W)(\d+\s*=\s*\d+|'[^']*'\s*=\s*'[^']*')(\b|\W)"))
            return true;

        // 4. Unbalanced or excessive quotes
        int singleQuotes = lowered.Count(c => c == '\'');
        int doubleQuotes = lowered.Count(c => c == '"');
        if (singleQuotes % 2 != 0 || doubleQuotes % 2 != 0)
            return true;
        if (singleQuotes > 10 || doubleQuotes > 10)
            return true;

        // 5. Hex/binary patterns
        if (System.Text.RegularExpressions.Regex.IsMatch(lowered, @"0x[0-9a-f]+"))
            return true;

        // 6. Batch/command chaining
        if (System.Text.RegularExpressions.Regex.IsMatch(lowered, @"\b(waitfor|sleep|benchmark|shutdown|;)\b"))
            return true;

        return false;
    }

    /// <summary>
    /// Exports the current query result DataTable to a CSV file and triggers a download in the browser.
    /// </summary>
    private async Task ExportGridToText()
    {
        if (dtResult == null || dtResult.Columns.Count == 0)
            return;

        var sb = new System.Text.StringBuilder();

        // Header
        for (int i = 0; i < dtResult.Columns.Count; i++)
        {
            sb.Append(dtResult.Columns[i].ColumnName);
            if (i < dtResult.Columns.Count - 1)
                sb.Append(',');
        }
        sb.AppendLine();

        // Rows
        foreach (DataRow row in dtResult.Rows)
        {
            for (int i = 0; i < dtResult.Columns.Count; i++)
            {
                var value = row[i]?.ToString()?.Replace("\t", " ") ?? "";
                sb.Append(value);
                if (i < dtResult.Columns.Count - 1)
                    sb.Append(',');
            }
            sb.AppendLine();
        }

        var fileName = $"QueryResult_{DateTime.Now:yyyyMMdd_HHmmss}.csv";
        var fileContent = sb.ToString();
        var bytes = System.Text.Encoding.UTF8.GetBytes(fileContent);
        var base64 = System.Convert.ToBase64String(bytes);

        await JS.InvokeVoidAsync("downloadFileFromBase64", fileName, base64);
    }

    /// <summary>
    /// List of example prompts for the user to select from.
    /// </summary>
    private List<string> prompts = new List<string>()
    {
        "Show me the total number of claims submitted in May 2025.",
        "Fetch all claims where the status is 'Paid' and the PaidDate is between January 2025 and March 2025",
        "What is the denial rate for claims submitted this year?",
        "List top 5 providers by total paid amount this year.",
        "Show me top 10 members based on claims paid amount in 2025.",
        "Give me claims pending for more than 60 days.",
        "Show all claims for member Enrollment Id ES0001 in 2025.",
        "Claims with no Enrollment Id",
        "Claims without active enrollment of the member",
        "show me the top 10 List of claimEdit status is Pend",
        "show me the top 10 List of claimEdit status is Deny",
        "Show me the duplicate members with same SSN and Enrollment year but different Member ID",
        "Show me the top 10 providers with the highest number of capitation claims in the last 6 months",
    };

    /// <summary>
    /// Sets the active tab index.
    /// </summary>
    /// <param name="tabIndex">The index of the tab to activate.</param>

    private List<string> recentQueries = new();

    private async void SetTab(int tabIndex)
    {
        activeTab = tabIndex;
        if (tabIndex == 1)
        {
            recentQueries = await QueryHistoryService.GetRecentQueriesForCurrentUserAsync(AuthService.CurrentUsername);
            StateHasChanged();
        }
    }

    /// <summary>
    /// Sets the user's input to the selected prompt.
    /// </summary>
    /// <param name="prompt">The prompt to set as user input.</param>
    private void SetPrompt(string prompt)
    {
        userInput = prompt;
    }
}
